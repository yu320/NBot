name: CI/CD to TrueNAS via GHCR

on:
  push:
    # 設置在推送到 main 分支時觸發工作流程
    branches:
      - main
  workflow_dispatch:
    # 允許手動從 GitHub Actions 介面觸發部署

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    env:
      IMAGE_NAME: nbot-discord
      # 確保語法正確 (使用 ${{ github.repository_owner }} 自動抓取您的 GitHub 名稱)
      GHCR_REPO: ghcr.io/${{ github.repository_owner }}/nbot-discord 
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- 1. GHCR 登入與設定 ---
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- 2. 建構並推送 Docker 映像檔到 GHCR ---
      - name: Build and Push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.GHCR_REPO }}:latest
            ${{ env.GHCR_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 3. 部署到 TrueNAS (透過 SSH 執行 Docker Compose 指令) ---
      - name: Deploy to TrueNAS via SSH
        uses: appleboy/ssh-action@v1.0.3
        
        # 將 GitHub Secrets 傳遞為環境變數
        # 這些變數會被 SSH 腳本中的 'docker compose up' 讀取
        env:
          TOKEN: ${{ secrets.DISCORD_TOKEN }}
          CHAN_ID: ${{ secrets.CHANNEL_ID }}
          KUMA_URL: ${{ secrets.UPTIME_KUMA_URL }}
          GHCR_REPO_URL: ${{ env.GHCR_REPO }}

        with:
          # SSH 連線資訊來自 GitHub Secrets
          host: ${{ secrets.TRUENAS_HOST }}
          username: ${{ secrets.TRUENAS_USER }}
          key: ${{ secrets.TRUENAS_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }} 
          
          script: |
            # 遠端伺服器上的部署腳本
            
            # 【關鍵】導航到您的 docker-compose.yml 檔案所在的目錄
            # (此路徑來自您的日誌截圖)
            cd /mnt/nas/apps/Dockge/Stacks/discord_bot/
            
            echo "--- 1. 拉取最新映像檔 ---"
            docker pull $GHCR_REPO_URL:latest

            echo "--- 2. 使用 docker compose 重新啟動服務 ---"
            # 'docker compose up -d' 會自動偵測到新映像檔並重新建立 nbot 容器
            # 它也會自動讀取 CI/CD 傳入的 $TOKEN, $CHAN_ID, $KUMA_URL
            docker compose up -d

            echo "--- 3. 清理舊映像檔 (可選) ---"
            docker image prune -f

            echo "--- 4. 部署完成 ---"
