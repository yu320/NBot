name: CI/CD to TrueNAS via GHCR

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    # 設置 GHCR 映像檔路徑
    env:
      IMAGE_NAME: nbot-discord
      # ⚠️ 映像檔路徑格式: ghcr.io/<GitHub_Owner>/<Image_Name>
      GHCR_REPO: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- 1. GHCR 登入與設定 (使用 GITHUB_TOKEN) ---
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # 使用 GitHub Actions 提供的內建權杖進行驗證
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- 2. 建構並推送 Docker 映像檔到 GHCR ---
      - name: Build and Push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 使用 GHCR_REPO 變數來指定儲存庫
          tags: |
            ${{ env.GHCR_REPO }}:latest
            ${{ env.GHCR_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- 3. 部署到 TrueNAS (透過 SSH 執行 Docker 更新指令) ---
      - name: Deploy to TrueNAS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.TRUENAS_HOST }}
          username: ${{ secrets.TRUENAS_USER }}
          key: ${{ secrets.TRUENAS_SSH_KEY }}
          script: |
            # 遠端伺服器上的部署腳本
            echo "--- 1. 登入 GHCR (如果需要私人映像檔) ---"
            # 如果您的映像檔是私有的 (預設)，TrueNAS 上的 Docker 服務需要登入。
            # 這裡需要您在 TrueNAS Secrets/環境變數中設定 GHCR 讀取權杖
            # 為了簡化，如果您的 GHCR 映像檔設定為公開 (Public)，則可省略此步驟。
            # 如果是私有，您需要建立一個 Personal Access Token (PAT) 具備 read:packages 權限，並將其設定為 TrueNAS 上的環境變數。

            echo "--- 2. 拉取最新映像檔 ---"
            # 拉取最新映像檔
            docker pull ${{ env.GHCR_REPO }}:latest

            echo "--- 3. 停止並移除舊容器 ---"
            docker stop nbot || true
            docker rm nbot || true

            echo "--- 4. 啟動新容器 ---"
            docker run -d \
              --name nbot \
              --restart unless-stopped \
              -e DISCORD_TOKEN='<YOUR_DISCORD_TOKEN>' \
              -e CHANNEL_ID='<YOUR_CHANNEL_ID>' \
              -e UPTIME_KUMA_URL='<YOUR_UPTIME_KUMA_URL>' \
              ${{ env.GHCR_REPO }}:latest

            echo "--- 5. 部署完成 ---"